1
00:00:00,150 --> 00:00:05,730
In this section, I would like to look at some of the methods you might use to break all this and what

2
00:00:05,730 --> 00:00:08,310
we could do to prevent that from happening.

3
00:00:08,640 --> 00:00:12,270
So if we look at our notes here, this is called Breaking RSA.

4
00:00:12,810 --> 00:00:19,320
RSA encryption is incredibly strong provided we protect ourselves from some obvious attacks.

5
00:00:19,770 --> 00:00:22,680
The first of which is frequency analysis.

6
00:00:22,860 --> 00:00:27,690
If you remember the examples we were looking at before, I was actually encrypting a message letter

7
00:00:27,690 --> 00:00:35,190
by letter, and as clever as RSA is, and that would still mean that we could break it by frequency

8
00:00:35,190 --> 00:00:38,040
analysis the way I presented it at least.

9
00:00:38,310 --> 00:00:45,480
So instead of encrypting one letter at a time, because that would still leave you vulnerable to simple

10
00:00:45,480 --> 00:00:52,290
frequency attack, this problem is overcome by blocking or grouping the letters into blocks.

11
00:00:53,010 --> 00:00:55,890
So let me show you an example of that.

12
00:00:56,250 --> 00:01:02,250
So instead of just doing each letter or each number one at a time, we're going to sort of block them

13
00:01:02,250 --> 00:01:03,930
together or group them together.

14
00:01:04,380 --> 00:01:08,970
So that's E equal 47.

15
00:01:10,320 --> 00:01:10,530
Okay.

16
00:01:10,620 --> 00:01:16,710
This is a public key I'm giving you here equals 47 and M equals 150.

17
00:01:17,620 --> 00:01:19,210
I like nice public information.

18
00:01:19,630 --> 00:01:26,830
Numerically message bad egg if you remember that had these values 103466.

19
00:01:27,340 --> 00:01:32,860
And yes, the way I did it before and you could see that there were some letters that were more common

20
00:01:32,860 --> 00:01:33,550
than others.

21
00:01:33,850 --> 00:01:41,470
But we could split this into three blocks of two letters, which would give us 1034 and 66.

22
00:01:41,680 --> 00:01:45,130
And it's this these groups that are acted on by the cipher.

23
00:01:45,340 --> 00:01:51,070
So what we would do is say ten to the power and then use our encryption key 47.

24
00:01:51,130 --> 00:01:59,450
And you could calculate that however you want it to and the value you would get is 8034 to the power

25
00:01:59,470 --> 00:02:06,770
47 and any Mod 115 would be 89 and 66 to the Power 47.

26
00:02:06,970 --> 00:02:10,990
In Model 115 is 111.

27
00:02:11,620 --> 00:02:14,020
So that would be the cipher text that I said.

28
00:02:14,200 --> 00:02:17,680
It would be hiding the frequencies of the individual letters.

29
00:02:18,010 --> 00:02:25,390
BLOCK Frequencies become more independent and more uniform as blocks get longer in ingress, blocks

30
00:02:25,390 --> 00:02:28,600
of ten letters are proximately equally likely.

31
00:02:28,840 --> 00:02:36,060
So if you can write your messages in blocks and then perform your calculations on those blocks instead.

32
00:02:36,880 --> 00:02:38,710
That should prevent frequency analysis.

33
00:02:39,780 --> 00:02:42,040
Let's have a look at this other attack here.

34
00:02:42,060 --> 00:02:44,730
It's called chosen plaintext attack.

35
00:02:45,390 --> 00:02:46,710
So this is very sneaky.

36
00:02:46,950 --> 00:02:54,450
This is another way to break RSA is to encrypt likely plain text messages using the public key and then

37
00:02:54,450 --> 00:02:56,970
seeing if they are equal to the ciphertext.

38
00:02:57,300 --> 00:02:59,130
So you've stolen a ciphertext.

39
00:02:59,340 --> 00:03:01,980
You think maybe it says, I don't know.

40
00:03:01,980 --> 00:03:04,020
I think it says Attack London.

41
00:03:04,590 --> 00:03:11,910
I can use the public key to see what attack London looks like in the cipher as a cipher.

42
00:03:12,120 --> 00:03:14,670
And compare it with the ciphertext I stole.

43
00:03:15,510 --> 00:03:24,300
So to prevent this, RSA typically embeds some form of structured randomized padding into the plaintext.

44
00:03:24,510 --> 00:03:32,130
So when you're sending a message using RSA, you would stick in some fake symbols in there as well.

45
00:03:33,090 --> 00:03:33,230
Yes.

46
00:03:33,330 --> 00:03:35,250
Spread throughout the plaintext.

47
00:03:35,550 --> 00:03:42,000
The padding ensures that the plaintext well encrypt to a large number of different possible ciphertext.

48
00:03:42,360 --> 00:03:45,720
So you could have many different possible padding.

49
00:03:45,870 --> 00:03:50,430
And then when you're encrypting these, you're going to get lots of different possibilities for your

50
00:03:50,430 --> 00:03:51,450
ciphertext.

51
00:03:52,350 --> 00:03:59,490
If we cannot distinguish between two ciphertext, even if they know or even if we know the original

52
00:03:59,490 --> 00:04:03,540
plaintext, we say the cipher is semantically secure.

53
00:04:04,260 --> 00:04:11,280
What I mean by that is imagine I gave you two cipher texts and I said, one of these says, Hello.

54
00:04:11,400 --> 00:04:12,960
One of these says Goodbye.

55
00:04:13,110 --> 00:04:14,970
Can you tell which one is which?

56
00:04:15,270 --> 00:04:17,760
And you look at them and you see that they're the same length.

57
00:04:18,390 --> 00:04:21,750
You don't notice any double letters or anything like that.

58
00:04:22,020 --> 00:04:25,890
And you say, No, I can't tell which one is hello, which one is goodbye?

59
00:04:26,100 --> 00:04:28,410
Then that is semantically secure.

60
00:04:28,920 --> 00:04:35,020
In practice, this makes the cipher security equivalent to that of a one time pat cipher.

61
00:04:35,100 --> 00:04:40,680
You're effectively saying these are equally likely to be hello or goodbye.

62
00:04:41,250 --> 00:04:49,110
RSA with appropriate padding is semantically secure, which is a good thing.

63
00:04:50,820 --> 00:04:57,480
I know that form of attack could be this cynical chosen ciphertext attack.

64
00:04:57,750 --> 00:05:00,120
And I've got some gaps here, so let's take a look at this.

65
00:05:00,600 --> 00:05:05,790
So let's say we are the spy trying to decrypt a cipher message.

66
00:05:05,800 --> 00:05:06,930
I'm going to call it C one.

67
00:05:08,040 --> 00:05:10,910
And we know that the cipher is RSA.

68
00:05:10,920 --> 00:05:14,370
So it's a plain text message p to the power e.

69
00:05:15,400 --> 00:05:16,420
In modern.

70
00:05:18,880 --> 00:05:25,960
We could sneakily ask the holder of the private key to decrypt a different cipher.

71
00:05:26,380 --> 00:05:28,480
I could say, Could you do me a favor?

72
00:05:28,720 --> 00:05:30,400
Could you decrypt this cipher?

73
00:05:30,670 --> 00:05:38,380
C two Now they would decrypt c two for you, but you've created this cipher and it is equal to or congruent

74
00:05:38,380 --> 00:05:39,910
to C one.

75
00:05:41,170 --> 00:05:43,690
Times x to the power e.

76
00:05:43,960 --> 00:05:44,890
M mod m.

77
00:05:47,090 --> 00:05:50,300
First some chosen integer x.

78
00:05:51,470 --> 00:05:54,260
So I know E has public information.

79
00:05:54,260 --> 00:05:55,190
I know m.

80
00:05:55,190 --> 00:05:56,420
That's public information.

81
00:05:56,630 --> 00:06:01,520
I've chosen a value for x, i whatever I want to choose.

82
00:06:02,090 --> 00:06:07,910
I then take x to the power e I multiply by the cipher I've stolen.

83
00:06:08,570 --> 00:06:14,300
Do that only mod and I've created a cipher a fake cipher could C2.

84
00:06:14,660 --> 00:06:19,490
I then ask the private key holder to decrypt this for me please.

85
00:06:20,090 --> 00:06:25,760
And if they do, the decryption will be p times x.

86
00:06:26,690 --> 00:06:27,410
Modern.

87
00:06:30,190 --> 00:06:31,520
So that's the result.

88
00:06:31,900 --> 00:06:33,850
And they say, here you go, decrypted it.

89
00:06:33,850 --> 00:06:37,300
It looks like this p x is what you're going to get.

90
00:06:37,570 --> 00:06:44,530
And if because you know what X is, you can find the multiplicative inverse of x and you can cancel

91
00:06:44,530 --> 00:06:48,850
that out and get P the original plain text message.

92
00:06:50,980 --> 00:06:57,310
However, of course we can prevent that using padding schemes.

93
00:06:57,640 --> 00:07:03,040
And here's an example something called okay, epi, optimal asymmetric encryption padding.

94
00:07:03,040 --> 00:07:09,580
So it's just a method of including these fake symbols that prevent this kind of attack, this chosen

95
00:07:09,580 --> 00:07:11,230
ciphertext attack.

96
00:07:13,280 --> 00:07:19,470
And finally, here is another way you could break RSA Factorization.

97
00:07:20,120 --> 00:07:26,390
This looks like an inherent flaw in RSA to me until you see what we're going to do.

98
00:07:26,870 --> 00:07:32,240
Finally, RSA can be broken if we can find the original primes.

99
00:07:32,720 --> 00:07:35,540
Q1 and Q2.

100
00:07:35,870 --> 00:07:42,470
If you can work out the original primes, then if you've got them, then you can calculate a because

101
00:07:42,470 --> 00:07:47,150
that's a simple thing is Q one minus one multiplied by Q2, minus one.

102
00:07:48,170 --> 00:07:57,860
And if you can calculate A, you can use A and E, which is public information to find that multiplicative

103
00:07:57,860 --> 00:08:09,680
decryption key D or multiplicative inverse of E, unfortunately, because M which is equal to Q one,

104
00:08:09,680 --> 00:08:12,950
Q two, and that is public information.

105
00:08:13,640 --> 00:08:17,240
We can find the original primes by factor ising.

106
00:08:17,450 --> 00:08:20,360
And so now imagine the spy.

107
00:08:20,630 --> 00:08:27,990
You take the public information, you've got an M as the modulus that tries it, you find the primes.

108
00:08:28,580 --> 00:08:35,930
If you find the primes, you can find a and you can use A and E together to find the decryption key

109
00:08:36,110 --> 00:08:37,190
and you've broken the code.

110
00:08:38,600 --> 00:08:46,670
That does sound like an inherent flaw in the scheme because you do give away this modulus as free information.

111
00:08:47,600 --> 00:08:50,870
And let's take a look at an example of you doing that.

112
00:08:51,380 --> 00:09:00,590
So here's an example, kind of like one we saw before we had an encryption key which is equals 47 and

113
00:09:00,590 --> 00:09:03,140
a modulus m equals 115.

114
00:09:04,610 --> 00:09:13,520
And it's not that hard really to work out that 150 is equal to five times 23.

115
00:09:15,080 --> 00:09:18,830
So I tried it and oh look, I've got two primes.

116
00:09:19,160 --> 00:09:27,050
Once I've got the primes, I can now calculate a which is equal to five minus one is four multiplied

117
00:09:27,050 --> 00:09:29,930
by 23 minus one is 22.

118
00:09:30,950 --> 00:09:33,260
So A is equal to 88.

119
00:09:34,730 --> 00:09:35,720
We can now use.

120
00:09:36,470 --> 00:09:37,780
Well, whatever method you want.

121
00:09:37,830 --> 00:09:44,960
I've used Euclid's algorithm here to calculate 15 times 47.

122
00:09:46,340 --> 00:09:46,940
Plus.

123
00:09:47,900 --> 00:09:50,150
Minus eight times 88.

124
00:09:52,490 --> 00:09:53,660
Equals to one.

125
00:09:54,930 --> 00:09:56,790
And that means the decryption key.

126
00:09:57,870 --> 00:10:02,040
Is this bit here in front of the 47 D equals 15.

127
00:10:02,280 --> 00:10:06,910
I've got the decryption key and now I can decrypt messages using that value.

128
00:10:06,930 --> 00:10:07,680
Oh, dear.

129
00:10:08,940 --> 00:10:19,200
However, this was possible because Q1 and Q2 the primes were quite small, relatively small.

130
00:10:19,740 --> 00:10:26,540
And so that means that the end value, the modulus was quite quickly factionalised.

131
00:10:27,390 --> 00:10:30,450
And the private key that was then found from the public key.

132
00:10:30,480 --> 00:10:31,110
Private key.

133
00:10:31,470 --> 00:10:33,150
It was found from the public key.

134
00:10:33,540 --> 00:10:36,780
In reality, the primes used are much larger.

135
00:10:37,110 --> 00:10:37,770
Right.

136
00:10:38,430 --> 00:10:42,390
So this is something I wanted to show you as so.

137
00:10:42,690 --> 00:10:45,290
And remember, this stuff is public information.

138
00:10:45,300 --> 00:10:53,910
So if you go to something like Amazon or eBay or your online bank, you can go into the settings.

139
00:10:53,910 --> 00:10:56,610
So you might go to your online bank's website.

140
00:10:57,060 --> 00:11:02,750
And if you look at maybe the address bar, they often have a padlock symbol.

141
00:11:02,760 --> 00:11:07,250
If you click on that, you will find something called the RSA key.

142
00:11:07,260 --> 00:11:11,670
So it's there for you to find because it's public information, the public keys there, and you will

143
00:11:11,670 --> 00:11:13,350
find those two numbers.

144
00:11:13,350 --> 00:11:19,980
We've talked about the E value, the encryption value, and you find the modulus as well, the M value.

145
00:11:20,220 --> 00:11:21,810
And that's what I did.

146
00:11:22,020 --> 00:11:25,890
I went to my bank's website and I found those values.

147
00:11:25,890 --> 00:11:33,410
The E value was something quite large, something like 65,000 and something bit the modulus values.

148
00:11:33,420 --> 00:11:35,850
What I wanted to show you the modulus values.

149
00:11:35,850 --> 00:11:39,360
Also, I know that large number and it's this number.

150
00:11:39,360 --> 00:11:40,050
I've got it here.

151
00:11:40,620 --> 00:11:41,820
So here it is.

152
00:11:43,050 --> 00:11:48,060
This is the modulus used by my bank to send RSA keys.

153
00:11:48,450 --> 00:11:55,560
And this is something that is something like 20,000 trillion.

154
00:11:57,810 --> 00:11:58,380
Google.

155
00:11:58,800 --> 00:12:00,780
Now, that is 100 digits there.

156
00:12:01,530 --> 00:12:03,600
Google has another 100 digits there.

157
00:12:04,440 --> 00:12:06,510
Google, another 100 digits.

158
00:12:07,230 --> 00:12:07,800
Google.

159
00:12:09,120 --> 00:12:09,780
Google.

160
00:12:11,130 --> 00:12:11,850
Google.

161
00:12:12,120 --> 00:12:12,960
There we go.

162
00:12:13,170 --> 00:12:20,970
This huge number is actually 617 digits long.

163
00:12:21,000 --> 00:12:22,670
Absolutely massive.

164
00:12:22,680 --> 00:12:22,950
Right.

165
00:12:23,040 --> 00:12:28,050
This is the value that my bank uses to send the RSA keys.

166
00:12:28,320 --> 00:12:28,950
Absolutely.

167
00:12:28,950 --> 00:12:30,600
Huge value.

168
00:12:30,810 --> 00:12:39,540
And this modulus was made by multiplying two prime numbers together, but two very large prime numbers

169
00:12:39,540 --> 00:12:40,080
together.

170
00:12:40,620 --> 00:12:45,180
So to fracture ice, this becomes an incredibly hard problem.

171
00:12:45,600 --> 00:12:54,120
Far too difficult to actually franchise this using a modern computer as so incredibly difficult problem

172
00:12:54,120 --> 00:12:54,930
to work out.

173
00:12:55,320 --> 00:12:59,190
And that's why they use these huge numbers.

174
00:12:59,310 --> 00:13:05,880
And I'm talking like if you used a computer, it would take 30,000 years or something like that.

175
00:13:06,360 --> 00:13:08,700
So this becomes a very difficult task.

176
00:13:08,910 --> 00:13:11,640
And current RSA Keys, yes.

177
00:13:11,640 --> 00:13:14,850
Would take modern computers thousands of years to factory.

178
00:13:14,910 --> 00:13:15,330
So there you go.

179
00:13:15,330 --> 00:13:17,760
That is the end of that section.

180
00:13:18,480 --> 00:13:24,030
Finally, let's take a look at the next section, which is something called signatures.

181
00:13:24,210 --> 00:13:30,120
How do we know if a message has actually come from the person we think it has?

182
00:13:30,300 --> 00:13:38,310
Well, actually, there's a way to sign your message, and it uses the RSA method to prove who you say

183
00:13:38,550 --> 00:13:39,090
you are.

184
00:13:39,330 --> 00:13:41,700
Okay, I will see you in the next video.
